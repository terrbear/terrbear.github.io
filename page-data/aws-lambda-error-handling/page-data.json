{"componentChunkName":"component---src-templates-blog-post-js","path":"/aws-lambda-error-handling/","result":{"data":{"site":{"siteMetadata":{"title":"terrbear dot org"}},"markdownRemark":{"id":"293346fd-4034-53d1-9ad2-beef43e5c913","excerpt":"This started as a simple “hey here’s how you make Sentry good in Lambda,” and then\nI just kept going and now it’s how we manage all the things that could go wrong in\nLambda in production. I’ve been doing a lot with AWS Lambda lately. Coupling \nit with AWS’s API Gateway, where \nI work we’ve built an entire API for our control plane. It’s been a lot of fun. But error reporting in Lambda sucks. Without a little help. Here are a few things we’ve\ndone to make it better. Sentry If you’re like me, the first thing you’ll try to do is install Sentry \nand just expect things to work. Except they won’t…","html":"<p>This started as a simple “hey here’s how you make Sentry good in Lambda,” and then\nI just kept going and now it’s how we manage all the things that could go wrong in\nLambda in production.</p>\n<p>I’ve been doing a <em>lot</em> with <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> lately. Coupling\nit with AWS’s <a href=\"https://aws.amazon.com/api-gateway/\">API Gateway</a>, where\nI work we’ve built an entire API for our control plane. It’s been a lot of fun.</p>\n<p>But error reporting in Lambda sucks. Without a little help. Here are a few things we’ve\ndone to make it better.</p>\n<h2>Sentry</h2>\n<p>If you’re like me, the first thing you’ll try to do is install <a href=\"https://sentry.io/welcome/\">Sentry</a>\nand just expect things to work. Except they won’t, because the <a href=\"https://github.com/getsentry/raven-node\">Node Sentry client</a>\nfires asynchronously and your Lambda’s going to exit more often than not before you even know something went\nwrong.</p>\n<p>I’ll write more later on how we manage our decently sized API, but here’s what the\nerror handling looks like now:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sentry <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./sentry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">applyFilters</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">sentry</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">return</span> <span class=\"token function\">sentry</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This way we handle rejected promises and uncaught exceptions.  As with everything,\nreading the underlying code helps a lot (see below). Here’s what our sentry\nwrapper looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Raven <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"raven\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Promise <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bluebird\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">SENTRY_DSN</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SENTRY_DSN</span><span class=\"token punctuation\">;</span>\n\nRaven<span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SENTRY_DSN</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> release<span class=\"token operator\">:</span> <span class=\"token string\">\"RELEASE_SHA\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> capture <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span>Raven<span class=\"token punctuation\">.</span>captureException<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> context<span class=\"token operator\">:</span> Raven <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sentry</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> extra <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sentrying!\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">capture</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> extra<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It’s obvious in hindsight, but yes, there’s a <a href=\"https://github.com/getsentry/raven-node/blob/master/lib/client.js#L355\">callback arg</a>\nin the captureException call that you can promisify, and then you can keep on\nkeeping your promises the rest of the time.</p>\n<h2>Release Tracking</h2>\n<p>We publish each release to Lambda to Sentry, using their nifty <a href=\"https://docs.sentry.io/learn/releases/\">release tracking</a>\nfeature. This yelps us isolate defects to specific releases in specific branches. I just track our releases\nwith the git SHA. Because this is backend and we don’t deal with source maps, that’s as easy\nas putting in the <code>release</code> in the extra data when configuring Raven.</p>\n<p>Here’s the relevant <a href=\"https://webpack.js.org/\">webpack</a> config section to keep Lambda error reporting\ntied to its commit (you’ll need to find the right envvar to track the SHA/commit yourself):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.js$/</span><span class=\"token punctuation\">,</span>\n    use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">{</span>\n        loader<span class=\"token operator\">:</span> StringReplacePlugin<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          replacements<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              pattern<span class=\"token operator\">:</span> <span class=\"token regex\">/RELEASE_SHA/g</span><span class=\"token punctuation\">,</span>\n              <span class=\"token function-variable function\">replacement</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">match<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GIT_SHA</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Memory Limits and Timeouts</h2>\n<p>Lambda will (kinda) silently fail when you either (a) try to allocate more memory\nthan prescribed, or (b) run past your declared timeout. At this point you won’t\nget a chance to send an event to Sentry, so you’ll need to have another way to\ncatch it when it happens.</p>\n<p>(Really if you exceed any of their <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/limits.html\">limits</a>\nit’ll blow up, but these are the causes we’ve run into most often.)</p>\n<p>Fortunately, Lambda <em>will</em> log that it exited prematurely. We can use that!</p>\n<p>We set up some <a href=\"https://aws.amazon.com/cloudwatch/\">CloudWatch</a> subscriptions\nthat look for premature exits. I’d suggest placing these in their own CF template\nbecause it’s easy to run into the CloudFormation template size limit.</p>\n<p>Here’s an example CloudFormation log filter subscription definition (the\nimportant part is the filter pattern):</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"YourServicePrematureSubscriptionFilter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"Type\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"AWS::Logs::SubscriptionFilter\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Properties\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"DestinationArn\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"Fn::Sub\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:premature-catcher\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"FilterPattern\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Process exited before completing\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"LogGroupName\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"/aws/lambda/YourService\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Any time that log message is seen, it gets sent to a Lambda that notifies us via\nSlack.</p>\n<p>Here’s a sanitized version of the Lambda that gets invoked when the subscription\nsees an event:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> zlib    <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zlib\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"event: \"</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>awslogs<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"base64\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  zlib<span class=\"token punctuation\">.</span><span class=\"token function\">gunzip</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decoded payload:\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Lambda premature exit detected in: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>parsed<span class=\"token punctuation\">.</span>logGroup<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> / </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>parsed<span class=\"token punctuation\">.</span>logStream<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">yourNotifyHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Successfully processed </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>parsed<span class=\"token punctuation\">.</span>logEvents<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> log events.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you have Sentry, release tracking, and alert when Lambdas exit before they’re\nexpected, you’ll know about a lot of errors at the same time your customers do,\ninstead of finding out after support does.</p>","frontmatter":{"title":"AWS Lambda Error Handling and Monitoring","date":"November 30, 2017","description":null}}},"pageContext":{"slug":"/aws-lambda-error-handling/","previous":{"fields":{"slug":"/iot-button-plus-pushover/"},"frontmatter":{"title":"AWS IoT Button + Pushover = Extra Laziness"}},"next":{"fields":{"slug":"/dpkg-apt-s3-2017/"},"frontmatter":{"title":"Packaging dpkg for S3 in 2017"}}}}}