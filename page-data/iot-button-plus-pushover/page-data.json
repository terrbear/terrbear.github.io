{"componentChunkName":"component---src-templates-blog-post-js","path":"/iot-button-plus-pushover/","result":{"data":{"site":{"siteMetadata":{"title":"terrbear dot org"}},"markdownRemark":{"id":"3ae9b72b-2348-549e-ad28-fd6b88b3ae9f","excerpt":"I’ve four kids (and we’re done). My oldest is 9, and my youngest is 2. The oldest always wakes up around 5am, and the toddler wakes up around 6:30. I don’t like waking up at 6:30, and the oldest can now get her out of the crib. So, every morning around 6:30, I hear the two year old start crying and then get my phone and text my son, who goes to get her. This is mostly great, except I have to wake up enough to send a text message (even just to copy/paste a previous request from the day before). I could suggest that he get her up any time she starts crying after 6:30, but there are circumstances…","html":"<p>I’ve four kids (and we’re done). My oldest is 9, and my youngest is 2. The oldest always wakes up around 5am, and the toddler wakes up around 6:30. I don’t like waking up at 6:30, and the oldest can now get her out of the crib.</p>\n<p>So, every morning around 6:30, I hear the two year old start crying and then get my phone and text my son, who goes to get her. This is mostly great, except I have to wake up enough to send a text message (even just to copy/paste a previous request from the day before).</p>\n<p>I could suggest that he get her up any time she starts crying after 6:30, but there are circumstances where we don’t want that, so I still want to be manually involved to some extent.</p>\n<p>Enter the <a href=\"https://aws.amazon.com/iot/button/\">Amazon IoT Button</a>. I hooked that up to an <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> function, which pings <a href=\"https://pushover.net/api\">Pushover</a>, which sends a push notification to my son’s iPad. So, now instead of sending a text, I just push a button and go back to sleep.</p>\n<p>The code itself is pretty simple. I didn’t really care about input, so it’s just an unused Java inputstream (note that all of the Lambda stuff requires plain Java interactions, so .asJava is necessary if you’re returning a non-primitive). Full repo on GitHub: <a href=\"https://github.com/terrbear/iot-pinger/\">terrbear/iot-pinger</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">package org.terrbear\n\nimport dispatch._, Defaults._\n\nimport scala.collection.JavaConverters._\n\nimport com.amazonaws.services.lambda.runtime.Context\n\nobject Natertot {\n  def main(args: Array[String]): Unit = {\n    val notifier = new Notifier\n    val answer = notifier.notify(notifier.YES_PLZ)\n    println(answer())\n  }\n}\n\nclass Notifier {\n  val PUSHOVER_KEY = &amp;quot;your-pushover-key&amp;quot;\n  val PUSHOVER_APP_KEY = &amp;quot;your-pushover-app-key&amp;quot;\n  val YES_PLZ = &amp;quot;Can you please get J out of bed?&amp;quot;\n\n  def lambda(input: java.io.InputStream, context: Context) : String = {\n    val logger = context.getLogger\n    logger.log(&amp;quot;got a click!&amp;quot;)\n    logger.log(notify(YES_PLZ)())\n    &amp;quot;all done&amp;quot;\n  }\n\n  def notify(msg: String): Future[String] = {\n    val request = url(&amp;quot;https://api.pushover.net/1/messages.json&amp;quot;).POST &amp;lt;&amp;lt; Map(&amp;quot;token&amp;quot; -&amp;gt; PUSHOVER_APP_KEY, &amp;quot;user&amp;quot; -&amp;gt; PUSHOVER_KEY, &amp;quot;message&amp;quot; -&amp;gt; msg)\n    Http(request OK as.String)\n  }\n}</code></pre></div>\n<p>I’m not really embracing <a href=\"http://dispatch.databinder.net/Dispatch.html\">Dispatch</a>’s futures here, but that seemed reasonable for the way it’s running. Also, Lambda wants a class it can instantiate to call the handler method (from my tiny bit of experimentation).</p>\n<p>Steps to reproduce:</p>\n<ol>\n<li>Buy an IoT Button</li>\n<li>Install Pushover and make an account and register an app</li>\n<li>Make your own Lambda function - when you’re creating the Lambda function you’ll be given an opportunity to register your IoT Button.</li>\n<li>Profit.</li>\n</ol>","frontmatter":{"title":"AWS IoT Button + Pushover = Extra Laziness","date":"May 23, 2016","description":null}}},"pageContext":{"slug":"/iot-button-plus-pushover/","previous":{"fields":{"slug":"/using-mina-with-atlassian-stash/"},"frontmatter":{"title":"Using Mina with Atlassian Stash"}},"next":{"fields":{"slug":"/aws-lambda-error-handling/"},"frontmatter":{"title":"AWS Lambda Error Handling and Monitoring"}}}}}